
Algorithme EstPalindrome(mot)
    // Supprimer les espaces et convertir en minuscules pour une comparaison insensible à la casse
    mot <- Remplacer(mot, " ", "")
    mot <- Minuscules(mot)
    // Vérifier si le mot est vide ou a un seul caractère
    Si Longueur(mot) <= 1 alors
        Retourner Vrai  // Un mot vide ou un mot d'un seul caractère est un palindrome
    Fin Si
    gauche <- 1
    droite <- Longueur(mot)
    TantQue gauche < droite
        Si mot[gauche] ≠ mot[droite] alors
            Retourner Faux  // Les caractères ne correspondent pas, le mot n'est pas un palindrome
        Fin Si
        gauche <- gauche + 1
        droite <- droite - 1
    Fin TantQue
    Retourner Vrai  // Le mot est un palindrome
Fin Algorithme
VAR
    // Déclarer les variables
    mot1: CHAINE DE CARACTERES
    mot2: CHAINE DE CARACTERES
    mot3: CHAINE DE CARACTERES
    mot4: CHAINE DE CARACTERES
DEBUT
    // Initialiser les mots
    mot1 <- "gag"
    mot2 <- "kayak"
    mot3 <- "php"
    mot4 <- "radar"
    // Appeler l'algorithme EstPalindrome pour chaque mot
    SI EstPalindrome(mot1) ALORS
        Afficher "mot1 est un palindrome"
    SINON
        Afficher "mot1 n'est pas un palindrome"
    FIN SI
    SI EstPalindrome(mot2) ALORS
        Afficher "mot2 est un palindrome"
    SINON
        Afficher "mot2 n'est pas un palindrome"
    FIN SI
    SI EstPalindrome(mot3) ALORS
        Afficher "mot3 est un palindrome"
    SINON
        Afficher "mot3 n'est pas un palindrome"
    FIN SI
    SI EstPalindrome(mot4) ALORS
        Afficher "mot4 est un palindrome"
    SINON
        Afficher "mot4 n'est pas un palindrome"
    FIN SI
FIN






Algorithme TriParInsertion(tableau)
    Pour i DE 1 A Longueur(tableau) - 1 FAIRE
        elementCourant <- tableau[i]
        j <- i - 1
        TantQue j >= 0 ET tableau[j] > elementCourant FAIRE
            tableau[j + 1] <- tableau[j]
            j <- j - 1
        FinTantQue
        tableau[j + 1] <- elementCourant
    FinPour
FinAlgorithme
VAR
    // Déclaration des variables
    tableauAtrier: TABLEAU D'ENTIERS [5]  // Remplacez 5 par la taille de votre tableau
    i: ENTIER
DEBUT
    // Initialisation du tableau à trier
    tableauAtrier <- [12, 11, 13, 5, 6]
    // Appel de l'algorithme de tri par insertion
    TriParInsertion(tableauAtrier)
    // Affichage du tableau trié
    POUR i DE 0 A Longueur(tableauAtrier) - 1 FAIRE
        AFFICHER tableauAtrier[i]
    FINPOUR
FIN




Algorithme AnalyserPhrase

Var
longueurPhrase, nombreMot, nombreVoyelle: Integer
phrase: String

Debut
longueurPhrase <-0
nombreMot <-0
nombreVoyelle <-0

Afficher "Entrez une phrase se terminant par un point (.)"
Lire phrase

Pour caractere de 1 a la longueur de la (phrase):
longueurPhrase <- longueurPhrase +1

SI caractere <- " "
nombreMot <-nombreMot +1

FIN SI

Si caractere <- "a" OU caractere <- "o" OU caractere <- "u" OU caractere <- "i" OU caractere <- "e" OU caractere <- "y"
nombreVoyelle <-nombreVoyeelle +1

FIN SI

Afficher "Voici un example de phrase"

Fin Pour
FIN




Algorithme addition

Var
//Declaration des variables
tab_ensemble_1: TABLEAU D'ENTIERS[4];
tab_ensemble_2: TABLEAU D'ENTIERS[5];
i: ENTIER
somme: ENTIER

DEBUT 
tab_ensemble_1 <- [3,1,7,9]
tab_ensemble_2 <- [2,4,1,9,3]
somme <- 0;


POUR i DE 0 A 3 FAIRE
    SI tab_ensemble_1[i] N'EST PAS 
    DANS tab_ensemble_2 ALORS
        somme <- somme+
    tab_ensemble_1[i];
    FIN SI
FIN POUR

POUR i DE 0 A 4 FAIRE
    SI tab_ensemble_2[i] N'EST PAS 
    DANS tab_ensemble_1 ALORS
    somme <- somme+
    tab_ensemble_2[i];
    FIN SI
FIN POUR

AFFICHER SOMME;

FIN



EXERCICE 3 de Algorithme

Algorithme ProduitScalaire(v1,v2)

Var 
//Declare variables for vectors
vector1: Tableau_de_reel [3];
vector2: Tableau_de_reel [3];
vector3: Tableau_de_reel [3];
vectors: Tableau_tableau_de_reel [3];

    Si Longueur(v1) # longueur(v2) ALORS
        Retoune None // Les vecteurs doivent avoir la meme dimension
    Fin SI
    ps <-0
    Pour i de 1 a longueur(v1)
        ps <- ps + v1[i]*v2[i]
    Fin Pour
    Retourner ps

Fin Algorithme


Algorithme SontOrthogonaux(vecteurs)
    Pour i de 1 a Longueur (vecteurs) -1
    Pou j de i+1 a Longueur(vecteurs)
        ps <- ProduitsScalaire(vecteurs[i], vecteurs[j])
        si ps = 0 ALORS
            Afficher "Les vecteurs" , i, "et", j, "ne sont pas orthogonaux."
            Fin SI
        Fin Pour
    Fin Pour
Fin Algorithme

Debut
    vecteur1 <- [1,0,0]
    vecteur2 <- [0,1,0]
    vecteurs3 <- [0,0,1]
    vecteurs <- [vecteur1, vecteur2, vecteur3]
    SontOrthogonaux(vecteurs)

Fin




Exercide 4 de Algorithme

Algorithme DotProduct(v1,v2)
//Calculer le produit scalaire de deux vecteurs
    ps= 0
    pour i=0 à longueur(v1) -1
        ps= ps + v1[i] * v2[i]
        fin pour
    Retourner ps
Fin Algorithme

Algorithme SontOrthogonaux(vecteurs)
//Verifier si n paires de vecteurs sont orthogonaux 
    pour i= 0 a longueur(vecteurs) -2
    pour j= i+1 a longueur(vecteurs) -1
        ps= DotProduct(vecteurs[i], vecteurs[j])
        si ps=0 alors 
            Afficher "Les vecteurs", i, "et", j, ne sont pas orthogonaux."
            Fin si
        fin pour
    fin pour
Fin Algorithme

Var
//Declarer les variables pour les vecteurs
    vecteur1: TABLEAU DE REEL [3];
    vecteur2: TABLEAU DE REEL [3];
    vecteur3: TABLEAU DE REEL [3];
    vecteurs: TABLEAU DE TABLEAU DE REEL [3];

DEBUT
//Initialiser les vecteurs
vecteur1: [1.0,0.0,0.0];
vecteur2: [0.0,1.0,0.0];
vecteur3: [0.0,0.0,1.0];

vecteur= [vecteur1, vecteur2, vecteur3]

SontOrthogonaux(vecteurs)

FIN











































